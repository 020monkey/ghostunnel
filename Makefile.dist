# Metadata about this makefile and position
MKFILE_PATH := $(lastword $(MAKEFILE_LIST))
CURRENT_DIR := $(patsubst %/,%,$(dir $(realpath $(MKFILE_PATH))))

GOVERSION ?= 1.10.0

# Current system information
GOOS ?= $(shell go env GOOS)
GOARCH ?= $(shell go env GOARCH)

# Default os-arch combination to build
XC_OS ?= darwin freebsd linux netbsd openbsd windows
XC_ARCH ?= 386 amd64

# External linkers for Windows (to get a static exe with libltdl included)
WINDOWS_EXTLD_amd64 = x86_64-w64-mingw-gcc
WINDOWS_EXTLD_386 = i686-w64-mingw-gcc

PROJECT := $(CURRENT_DIR:$(GOPATH)/src/%=%)
NAME := $(notdir $(PROJECT))
GIT_COMMIT ?= $(shell git rev-parse --short HEAD)
VERSION ?= $(shell awk -F\" '/version/ { print $$2; exit }' "${CURRENT_DIR}/main.go")

LD_FLAGS ?= \
	-s \
	-X ${PROJECT}/version.Name=${NAME} \
	-X ${PROJECT}/version.GitCommit=${GIT_COMMIT}

# Create a cross-compile target for every os-arch pairing. This will generate
# a make target for each os/arch like "make linux/amd64" as well as generate a
# meta target (build) for compiling everything.
define make-xc-target
  $1/$2:
  ifeq (${1},windows)
	@printf "%s%20s %s\n" "-->" "${1}/${2}:" "${PROJECT} (-w -extldflags "-static" -extld ${WINDOWS_EXTLD_${2}})"
	@docker run \
		--interactive \
		--rm \
		--volume="${CURRENT_DIR}:/go/src/${PROJECT}" \
		--workdir="/go/src/${PROJECT}" \
		"golang:${GOVERSION}" \
		env \
			CGO_ENABLED="0" \
			GOOS="${1}" \
			GOARCH="${2}" \
			go build \
			  -a \
				-o="dist/${NAME}-${VERSION}-${1}-${2}.exe" \
				-ldflags "${LD_FLAGS} -w -extldflags "-static" -extld ${WINDOWS_EXTLD_${2}}" \
				-tags "${GOTAGS}"
  else
	@printf "%s%20s %s\n" "-->" "${1}/${2}:" "${PROJECT}"
	@docker run \
		--interactive \
		--rm \
		--volume="${CURRENT_DIR}:/go/src/${PROJECT}" \
		--workdir="/go/src/${PROJECT}" \
		"golang:${GOVERSION}" \
		env \
			CGO_ENABLED="0" \
			GOOS="${1}" \
			GOARCH="${2}" \
			go build \
			  -a \
				-o="dist/${NAME}-${VERSION}-${1}-${2}" \
				-ldflags "${LD_FLAGS}" \
				-tags "${GOTAGS}"
  endif
  .PHONY: $1/$2

  $1:: $1/$2
  .PHONY: $1

  build:: $1/$2
  .PHONY: build
endef
$(foreach goarch,$(XC_ARCH),$(foreach goos,$(XC_OS),$(eval $(call make-xc-target,$(goos),$(goarch),$(if $(findstring windows,$(goos)),.exe,)))))

# dist builds the binaries for distribution
dist:
	@mkdir -p ${CURRENT_DIR}/dist
	@$(MAKE) -f "${MKFILE_PATH}" _cleanup
	@$(MAKE) -f "${MKFILE_PATH}" -j1 build
	@$(MAKE) -f "${MKFILE_PATH}" _checksum
.PHONY: dist

# _checksum produces the checksums for the binaries in dist
_checksum:
	@cd "${CURRENT_DIR}/dist" && \
		shasum --algorithm 256 * > ${CURRENT_DIR}/dist/${NAME}-${VERSION}-sha256sums.txt && \
		cd - &>/dev/null
.PHONY: _checksum

# _cleanup removes any previous binaries
_cleanup:
	@rm -rf "${CURRENT_DIR}/dist/"
.PHONY: _cleanup
